#!/usr/bin/env bash
version=0.6.1

tmpdir="${TMPDIR:-/tmp}/p3wm"
create_tmp_root() {
  mkdir -p "$tmpdir"
}

mktmp() {
  mktemp -p "$tmpdir" --suffix "$@"
}

find_resolve_tool() {
  if [[ -n $P3WM_RESOLVE_TOOL ]]; then
    return
  fi

  if has_bin kdiff3; then
    P3WM_RESOLVE_TOOL=builtin_resolve_kdiff3
  elif has_bin meld; then
    P3WM_RESOLVE_TOOL=builtin_resolve_meld
  elif has_bin vim; then
    P3WM_RESOLVE_TOOL=builtin_resolve_vim
  else
    echo No resolve tool available.
    echo "Please install vim / meld / kdiff3, or set a custom ‘\$P3WM_RESOLVE_TOOL’"
    echo "See p3wm(8) for details"
    exit 4
  fi
}

builtin_resolve_kdiff3() {
  kdiff3 --auto -o "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
}

builtin_resolve_meld() {
  meld --auto-merge "$LOCAL" "$BASE" "$REMOTE" -o "$MERGED"
}

builtin_resolve_vim() {
  vim -f -d -c "4wincmd w | wincmd J" "$LOCAL" "$BASE" "$REMOTE" "$MERGED"
}

has_bin() {
  type -p "$1" >/dev/null
}

find_merge_tool() {
  if [[ -n $P3WM_MERGE_TOOL ]]; then
    return
  fi

  if has_bin git; then
    P3WM_MERGE_TOOL=builtin_merge_git
  elif has_bin merge; then
    P3WM_MERGE_TOOL=builtin_merge_merge
  else
    echo No merge tool available.
    echo "Please install git / rcs, or set a custom ‘\$P3WM_MERGE_TOOL’"
    echo "See p3wm(8) for details"
    exit 5
  fi
}

builtin_merge_git() {
  git merge-file -p "$@"
}

builtin_merge_merge() {
  merge -p "$@"
}


get_ver_tuple() {
  tac /var/log/pacman.log \
    | sed -Ene "/\\[ALPM\\] upgraded $1 / !d" \
      -e 's/.*\(([^ ]+) -> ([^)]+).*/\1 \2/p' -e q
}

get_pkg_arch() {
  LANG=C pacman -Qi "$1" | awk '$1 == "Architecture" {print $3}'
}

resolve_tool() {
  local LOCAL="$1" BASE="$2" REMOTE="$3" MERGED="$4"
  eval "$P3WM_RESOLVE_TOOL"
}

ask_for_action() {
  printf "(V)iew diff, (D)elete .pacnew, (A)ccept merge, (R)un resolve tool, (Q)uit? "
}

set_debugging() {
  if [[ $P3WM_DEBUG = 1 ]]; then
    set -x
  fi
}

set_shopts() {
  set -e
  shopt -s nullglob
}

print_usage() {
  cat <<EOF
p3wm(8) v$version

Usage: p3wm <pacnew file>

Example: ‘p3wm /etc/pacman.d/mirrorlist.pacnew’

See ‘man 8 p3wm’ for detailed usage and configuration.
EOF
}

verify_args() {
  if [[ $# != 1 ]]; then
    echo "$0 accepts one and only one argument."
    exit 1
  fi

  if [[ ! -f $1 ]]; then
    print_usage
    exit 1
  fi
}

prepare_bf_base() {
  bf_local="$1"

  pkg_name="$(pacman -Qoq "$bf_local")"

  ver_tuple="$(get_ver_tuple "$pkg_name")"
  oldver="${ver_tuple% *}"
  pkg_cached="$(find_cached_pkg "$pkg_name" "$oldver")"

  basename_=$(basename "$bf_local")
  bf_base="$(mktmp ".base.$basename_")"
  bf_id="${bf_local#/}"
  tar xOf "$pkg_cached" "$bf_id" -- > "$bf_base"

  echo -n "$bf_base"
}

find_cached_pkg() {
  local pkg_name="$1" ver="$2"
  arch="$(get_pkg_arch "$pkg_name")"

  mapfile -t cache_dirs < <(pacman-conf CacheDir)
  for cache_dir in "${cache_dirs[@]}"; do
    for f in "$cache_dir/$pkg_name-$ver-$arch".pkg.* ; do
      pkg_cached="$f"
    done
  done

  if [[ -z $pkg_cached ]]; then
    echo "Unable to find package ‘$pkg_name-$ver-$arch’ in cache"
    exit 2
  fi

  echo -n "$pkg_cached"
}

prepare_bf_merged() {
  local bf_local="$1"
  basename_=$(basename "$bf_local")
  bf_merged="$(mktmp ".merged.$basename_")"
  chmod --reference="$bf_local" "$bf_merged"
  echo -n "$bf_merged"
}

verify_bf_files() {
  local bf_pacnew="$1" bf_local="$2"

  if [[ $bf_pacnew = "$bf_local" ]]; then
    echo "Filename doesn't end with .pacnew"
    exit 3
  fi

  if [[ ! -f $bf_pacnew ]]; then
    echo "File $bf_pacnew doesn't exist"
    exit 6
  fi

  if [[ ! -f $bf_local ]]; then
    echo "File $bf_local doesn't exist"
    exit 7
  fi
}

main() {
  set_debugging
  set_shopts

  create_tmp_root
  find_merge_tool
  find_resolve_tool

  verify_args "$@"

  set -u

  bf_pacnew="$(realpath "$1")"
  bf_local="${bf_pacnew%.pacnew}"

  verify_bf_files "$bf_pacnew" "$bf_local"

  bf_base="$(prepare_bf_base "$bf_local")"
  bf_merged="$(prepare_bf_merged "$bf_local")"

  if "$P3WM_MERGE_TOOL" "$bf_local" "$bf_base" "$bf_pacnew" > "$bf_merged"
  then
    echo M "$bf_local" "can be cleanly merged"
  else
    echo C "$bf_local" "cannot be cleanly merged"
  fi


  while ask_for_action; read -r answer; do
    case "$answer" in
      q|Q)
        return 0
        ;;
      v|V)
        diff -u "$bf_local" "$bf_merged" | "${PAGER:-less}"
        ;;
      d|D)
        rm -v "$bf_pacnew"
        return 0
        ;;
      a|A)
        mv -v "$bf_merged" "$bf_local"
        rm -v "$bf_pacnew"
        return 0
        ;;
      r|R)
        resolve_tool "$bf_local" "$bf_base" "$bf_pacnew" "$bf_merged" ||:
        ;;
      *)
        echo "Action not understood."
        ;;
    esac
  done
}

if [[ "$0" = "${BASH_SOURCE[0]}" ]]; then
  main "$@"
fi
