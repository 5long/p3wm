#!/usr/bin/env bash

tmpdir="${TMPDIR:-/tmp}/p3wm"
create_tmp_root() {
  mkdir -p "$tmpdir"
}

mktmp() {
  mktemp -p "$tmpdir" --suffix "$@"
}

find_resolve_tool() {
  if [[ -n $P3WM_RESOLVE_TOOL ]]; then
    return
  fi

  if has_bin kdiff3; then
    P3WM_RESOLVE_TOOL='kdiff3 --auto -o "$MERGED" "$BASE" "$LOCAL" "$REMOTE"'
  elif has_bin meld; then
    P3WM_RESOLVE_TOOL='meld --auto-merge "$LOCAL" "$BASE" "$REMOTE" -o "$MERGED"'
  elif has_bin vim; then
    P3WM_RESOLVE_TOOL='vim -f -d -c "4wincmd w | wincmd J" "$@"'
  else
    echo No resolve tool available.
    echo "Please install vim / meld / kdiff3, or set a custom \`\`\$P3WM_RESOLVE_TOOL''"
    exit 4
  fi
}

has_bin() {
  type -P "$1" >/dev/null
}

find_merge_tool() {
  if [[ -n $P3WM_MERGE_TOOL ]]; then
    return
  fi

  if has_bin git; then
    P3WM_MERGE_TOOL="git merge-file -p"
  elif has_bin merge; then
    P3WM_MERGE_TOOL="merge -p"
  else
    echo No merge tool available.
    echo "Please install git / rcs, or set a custom \`\`\$P3WM_MERGE_TOOL''"
    exit 5
  fi
}


get_ver_tuple() {
  tac /var/log/pacman.log \
    | sed -Ene "/\\[ALPM\\] upgraded $1 / !d" \
      -e 's/.*\(([^ ]+) -> ([^)]+).*/\1 \2/p' -e q
}

get_pkg_arch() {
  pacman -Qi "$1" | awk '$1 == "Architecture" {print $3}'
}

resolve_tool() {
  local LOCAL="$1" BASE="$2" REMOTE="$3" MERGED="$4"
  eval "$P3WM_RESOLVE_TOOL"
}

main() {
  if [[ $P3WM_DEBUG = 1 ]]; then
    set -x
  fi

  set -e
  shopt -s nullglob

  create_tmp_root
  find_merge_tool
  find_resolve_tool

  if [[ ! -f $1 ]]; then
    cat <<EOF
Usage: p3wm <pacnew file>

Example: \`\`p3wm /etc/pacman.d/mirrorlist.pacnew''
EOF
    exit 1
  fi

  set -u

  bf_pacnew="$(realpath "$1")"
  bf_local="${bf_pacnew%.pacnew}"
  pkg_name="$(pacman -Qoq "$bf_local")"
  if [[ $bf_pacnew = "$bf_local" ]]; then
    echo 'You done messed up'
    exit 3
  fi

  ver_tuple="$(get_ver_tuple "$pkg_name")"
  oldver="${ver_tuple% *}"

  arch="$(get_pkg_arch "$pkg_name")"
  basename=$(basename "$bf_local")
  bf_base="$(mktmp ".base.$basename")"

  pkg_cached=""
  for f in /var/cache/pacman/pkg/"$pkg_name"-"$oldver"-"$arch".pkg.* ; do
    pkg_cached="$f"
  done

  if [[ -z $pkg_cached ]]; then
    echo "Unable to find package \`\`$pkg_name-$oldver-$arch'' in cache"
    exit 2
  fi

  bf_id="${bf_local#/}"
  tar xOf "$pkg_cached" "$bf_id" -- > "$bf_base"
  bf_merged="$(mktmp ".merged.$basename")"

  if git merge-file -p "$bf_local" "$bf_base" "$bf_pacnew" > "$bf_merged"
  then
    echo M "$bf_local"
  else
    echo C "$bf_local"
    resolve_tool "$bf_local" "$bf_base" "$bf_pacnew" "$bf_merged"
  fi

  chmod --reference="$bf_local" "$bf_merged"
  set -x
  mv -i "$bf_merged" "$bf_local"
  rm -i "$bf_pacnew"
}

if [[ "$0" = "${BASH_SOURCE[0]}" ]]; then
  main "$@"
fi
